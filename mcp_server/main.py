# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:04:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyCookie, BaseSecurity, HTTPBearer
from fastapi import Header, Query
from starlette.requests import Request

from models import Subscriptions, Topic

app = MCPProxy(
    contact={
        'email': 'contact@mercure.rocks',
        'name': 'KÃ©vin Dunglas',
        'url': 'https://mercure.rocks',
    },
    description='[Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.',
    license={
        'name': 'GNU Affero General Public License v3.0 or later',
        'url': 'https://github.com/dunglas/mercure/blob/master/LICENSE',
        'x-spdx': 'AGPL-3.0-or-later',
    },
    title='The Mercure protocol',
    version='0.3.2',
    servers=[{'url': 'http://mercure.local'}],
)


@app.get(
    '/.well-known/mercure',
    tags=['mercure_subscription_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyCookie(name="mercureAuthorization"),
    ],
)
def get__well_known_mercure(
    topic: Topic,
    last__event__i_d: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='Last-Event-ID'),
):
    """
    Subscribe to updates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/.well-known/mercure',
    tags=['mercure_subscription_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyCookie(name="mercureAuthorization"),
    ],
)
def post__well_known_mercure(request: Request):
    """
    Publish an update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/.well-known/mercure/subscriptions',
    tags=['mercure_subscription_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyCookie(name="mercureAuthorization"),
    ],
)
def get__well_known_mercure_subscriptions():
    """
    Active subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/.well-known/mercure/subscriptions/{topic}',
    tags=['mercure_subscription_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyCookie(name="mercureAuthorization"),
    ],
)
def get__well_known_mercure_subscriptions__topic(topic: str):
    """
    Active subscriptions for the given topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/.well-known/mercure/subscriptions/{topic}/{subscriber}',
    tags=['mercure_subscription_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyCookie(name="mercureAuthorization"),
    ],
)
def get__well_known_mercure_subscriptions__topic__subscriber(
    topic: str, subscriber: str = ...
):
    """
    Active subscription for the given topic and subscriber
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
